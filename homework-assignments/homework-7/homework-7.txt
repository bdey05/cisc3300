Bipra Dey

CISC 3300 S25 
Homework 7 

1. What is a class? What is an object? What is OOP? 

A class is a template for creating objects and contains properties and methods. An object is an instance of a class. 
OOP (Object-Oriented Programming) is a programming paradigm that uses objects that store data and functions in order to perform tasks. 
OOP allows for modularity and higher reusability through its key principles of encapsulation (bundling properties and methods into a single class unit), 
inheritance (the ability for a class to inherit properties and methods from another class), polymorphism (the ability of objects from different classes to behave like an object of a common parent class), 
and abstraction (the ability to hide implementation details for an object and show only the necessary features for the user to be able to interact with the object). 

2. Why use an abstract class in OOP? 

An abstract class is a class that is not meant to be instantiated and its only purpose is to be extended by child classes. 
Abstract classes provide high level functionality and leave the smaller, fine-grained details for the derived classes to implement. 
As a result, an abstract class can act as a template for multiple related classes and this makes it easier to reuse code and have a standard structure within a program. 

3. What are superglobals in PHP, what are some examples of data they provide?

Superglobals are predefined variables that are always accessible within a program without any extra steps regardless of scope. 
Some examples of data that superglobals provide are server environment data such as request methods ($_SERVER[‘REQUEST_METHOD’]) and session data through the $_SESSION superglobal.

4. What are the two steps to setting up and using a class via namespaces? 

To set up and use a class via namespaces you have to first define a namespace in the file where the class is defined. 
Next, in the location where you want to use the class you have to either type out the full namespace everywhere you want to use the class or you can import the namespace using the use keyword. 

5. What is MVC? Detail the different parts. 

MVC (Model-View-Controller) is an architectural pattern that splits an application into 3 core components (Model, View, and Controller). 
The Model part of the application deals with the data-related logic including performing CRUD (Create, Read, Update, Delete) operations on a database or informing the View and Controller of changes in the data state. 
The View part of the application handles the UI logic that the user interacts with. The View component renders data it receives from its interactions with the controller and displays it to the user. 
The Controller acts as an intermediary between the View and the Model. The Controller receives user input from the View, interprets it, and updates the Model as it deems appropriate. 

6. If I had a resource called users in my application that was designed with RESTFUL URI design, what would the URI and HTTP verbs be for: 
a. getting all users 
    GET /users	

b. getting one users 
	GET /users/43

c. saving a user 
	POST /users

d. editing a user 
	PATCH /users/43

e. deleting a user 
	DELETE /users/43
	
7. Create a PHP project in an MVC style. It should have the ability to submit a new note resource, a note should have a title and a description. The title of the note should be more than 3 characters long and the description should be more than 10 characters long. Any special characters should be converted to HTML entities. On the frontend show a success message if the request is successful and an error message if anything is wrong. Add some basic styling. 
a. no need for a model class, the validation can happen in a controller method.
